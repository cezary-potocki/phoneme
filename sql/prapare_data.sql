  create user phonetic password 'phoneticsearch';
  CREATE DATABASE phonetic WITH OWNER = phonetic ENCODING = UTF8;
  create schema sample;
  GRANT ALL ON SCHEMA public TO phonetic;
  GRANT ALL ON ALL TABLES IN SCHEMA public TO phonetic;


  ALTER SYSTEM SET wal_level = minimal;
  ALTER SYSTEM SET archive_mode = off;
  ALTER SYSTEM SET max_wal_senders = 0;


  drop table person_master_src;
  create table person_master_src (
  SPM_FULL_ANAME VARCHAR(80),
  SPM_ANAME VARCHAR(15),
  SPM_FATHER_ANAME varchar(15),
  SPM_GRAND_ANAME varchar(15),
  SPM_POST_GRAND_ANAME varchar(15),
  SPM_FIFTH_ANAME varchar(15),
  SPM_FAMILY_ANAME varchar(15),
  SPM_CLAN_ANAME varchar(20),
  SPM_MOTHER_ANAME varchar(15),
  SPM_MOTHER_FATHER_ANAME varchar(15),
  SPM_FULL_ENAME varchar(80),
  SPM_ENAME varchar(15),
  SPM_FATHER_ENAME varchar(15),
  SPM_GRAND_ENAME varchar(15),
  SPM_POST_GRAND_ENAME varchar(15),
  SPM_FIFTH_ENAME varchar(15),
  SPM_FAMILY_ENAME varchar(15),
  SPM_CLAN_ENAME varchar(20),
  SPM_MOTHER_ENAME varchar(15),
  SPM_MOTHER_FATHER_ENAME varchar(15));


  \COPY person_master_src FROM '/home/phonetic/source_data/1_10_m.dsv' DELIMITER '|' CSV HEADER;
  \COPY person_master_src FROM '/home/phonetic/source_data/10m-end_split_aa' DELIMITER '|' CSV HEADER;
  \COPY person_master_src FROM '/home/phonetic/source_data/10m-end_split_ab' DELIMITER '|' CSV;
  \COPY person_master_src FROM '/home/phonetic/source_data/10m-end_split_ac' DELIMITER '|' CSV;
  \COPY person_master_src FROM '/home/phonetic/source_data/10m-end_split_ad' DELIMITER '|' CSV;
  \COPY person_master_src FROM '/home/phonetic/source_data/10m-end_split_ae' DELIMITER '|' CSV;
  \COPY person_master_src FROM '/home/phonetic/source_data/10m-end_split_af' DELIMITER '|' CSV;
  \COPY person_master_src FROM '/home/phonetic/source_data/10m-end_split_ag' DELIMITER '|' CSV;
  \COPY person_master_src FROM '/home/phonetic/source_data/10m-end_split_ah' DELIMITER '|' CSV;
  \COPY person_master_src FROM '/home/phonetic/source_data/10m-end_split_ai' DELIMITER '|' CSV;
  \COPY person_master_src FROM '/home/phonetic/source_data/10m-end_split_aj' DELIMITER '|' CSV;
  --\COPY person_master_src FROM '/home/phonetic/source_data/10m-end_split_ak' DELIMITER '|' CSV HEADER;



  CREATE TABLE PERSON_MASTER(
  ID SERIAL NOT NULL,
  SPM_FULL_ANAME VARCHAR(80),
  SPM_ANAME VARCHAR(15),
  SPM_FATHER_ANAME varchar(15),
  SPM_GRAND_ANAME varchar(15),
  SPM_POST_GRAND_ANAME varchar(15),
  SPM_FIFTH_ANAME varchar(15),
  SPM_FAMILY_ANAME varchar(15),
  SPM_CLAN_ANAME varchar(20),
  SPM_MOTHER_ANAME varchar(15),
  SPM_MOTHER_FATHER_ANAME varchar(15),
  SPM_FULL_ENAME varchar(80),
  SPM_ENAME varchar(15),
  SPM_FATHER_ENAME varchar(15),
  SPM_GRAND_ENAME varchar(15),
  SPM_POST_GRAND_ENAME varchar(15),
  SPM_FIFTH_ENAME varchar(15),
  SPM_FAMILY_ENAME varchar(15),
  SPM_CLAN_ENAME varchar(20),
  SPM_MOTHER_ENAME varchar(15),
  SPM_MOTHER_FATHER_ENAME varchar(15),
  CONSTRAINT PERSON_MASTER_PKEY PRIMARY KEY (ID));




  prepare load_uppercase AS
  insert into person_master(
    SPM_FULL_ANAME,
    SPM_ANAME,
    SPM_FATHER_ANAME,
    SPM_GRAND_ANAME,
    SPM_POST_GRAND_ANAME,
    SPM_FIFTH_ANAME,
    SPM_FAMILY_ANAME,
    SPM_CLAN_ANAME,
    SPM_MOTHER_ANAME,
    SPM_MOTHER_FATHER_ANAME,
    SPM_FULL_ENAME,
    SPM_ENAME,
    SPM_FATHER_ENAME,
    SPM_GRAND_ENAME,
    SPM_POST_GRAND_ENAME,
    SPM_FIFTH_ENAME,
    SPM_FAMILY_ENAME,
    SPM_CLAN_ENAME,
    SPM_MOTHER_ENAME,
    SPM_MOTHER_FATHER_ENAME
    )
  select
    upper(SPM_FULL_ANAME),
    upper(SPM_ANAME),
    upper(SPM_FATHER_ANAME),
    upper(SPM_GRAND_ANAME),
    upper(SPM_POST_GRAND_ANAME),
    upper(SPM_FIFTH_ANAME),
    upper(SPM_FAMILY_ANAME),
    upper(SPM_CLAN_ANAME),
    upper(SPM_MOTHER_ANAME),
    upper(SPM_MOTHER_FATHER_ANAME),
    upper(SPM_FULL_ENAME),
    upper(SPM_ENAME),
    upper(SPM_FATHER_ENAME),
    upper(SPM_GRAND_ENAME),
    upper(SPM_POST_GRAND_ENAME),
    upper(SPM_FIFTH_ENAME),
    upper(SPM_FAMILY_ENAME),
    upper(SPM_CLAN_ENAME),
    upper(SPM_MOTHER_ENAME),
    upper(SPM_MOTHER_FATHER_ENAME)
  from person_master_src;
  execute load_uppercase;


  CREATE INDEX person_master_spm_aname_idx ON person_master (SPM_ANAME) ;
  CREATE INDEX person_master_spm_father_aname_idx ON person_master (SPM_FATHER_ANAME) ;
  CREATE INDEX person_master_spm_grand_aname_idx ON person_master (SPM_GRAND_ANAME) ;
  CREATE INDEX person_master_spm_fifth_aname_idx ON person_master (SPM_FIFTH_ANAME) ;
  CREATE INDEX person_master_spm_family_aname_idx ON person_master (SPM_FAMILY_ANAME) ;
  CREATE INDEX person_master_spm_clan_aname_idx ON person_master (SPM_CLAN_ANAME) ;
  CREATE INDEX person_master_spm_mother_aname_idx ON person_master (SPM_MOTHER_ANAME) ;
  CREATE INDEX person_master_spm_mother_father_aname_idx ON person_master (SPM_MOTHER_FATHER_ANAME) ;
  CREATE INDEX person_master_spm_post_grand_aname_idx ON person_master (SPM_POST_GRAND_ANAME) ;
  CREATE INDEX person_master_spm_ename_idx ON person_master (SPM_ENAME) ;
  CREATE INDEX person_master_spm_father_ename_idx ON person_master (SPM_FATHER_ENAME) ;
  CREATE INDEX person_master_spm_grand_ename_idx ON person_master (SPM_GRAND_ENAME) ;
  CREATE INDEX person_master_spm_post_grand_ename_idx ON person_master (SPM_POST_GRAND_ENAME) ;
  CREATE INDEX person_master_spm_fifth_ename_idx ON person_master (SPM_FIFTH_ENAME) ;
  CREATE INDEX person_master_spm_family_ename_idx ON person_master (SPM_FAMILY_ENAME) ;
  CREATE INDEX person_master_spm_clan_ename_idx ON person_master (SPM_CLAN_ENAME) ;
  CREATE INDEX person_master_spm_mother_ename_idx ON person_master (SPM_MOTHER_ENAME) ;
  CREATE INDEX person_master_spm_mother_father_ename_idx ON person_master (SPM_MOTHER_FATHER_ENAME) ;








  DROP TABLE NAME_SRC;
  CREATE TABLE NAME_SRC(
  ENG VARCHAR(15),
  ARB VARCHAR(15));

  PREPARE LOAD_NAME AS
  INSERT INTO NAME_SRC(ARB,ENG)
  SELECT
    UPPER(SPM_ANAME),
    UPPER(SPM_ENAME)
  FROM PERSON_MASTER_SRC;
  EXECUTE LOAD_NAME;

  DROP TABLE FATHER_NAME_SRC;
  CREATE TABLE FATHER_NAME_SRC(
  ENG VARCHAR(15),
  ARB VARCHAR(15));

  PREPARE LOAD_FATHER_NAME AS
  INSERT INTO FATHER_NAME_SRC(ARB,ENG)
  SELECT
    UPPER(SPM_FATHER_ANAME),
    UPPER(SPM_FATHER_ENAME)
  FROM PERSON_MASTER_SRC;
  EXECUTE LOAD_FATHER_NAME;

  DROP TABLE GRAND_NAME_SRC;
  CREATE TABLE GRAND_NAME_SRC(
  ID SERIAL NOT NULL,
  ENG VARCHAR(15),
  ARB VARCHAR(15));

  PREPARE LOAD_GRAND_NAME AS
  INSERT INTO GRAND_NAME_SRC(ARB,ENG)
  SELECT
    UPPER(SPM_GRAND_ANAME),
    UPPER(SPM_GRAND_ENAME)
  FROM PERSON_MASTER_SRC;
  EXECUTE LOAD_GRAND_NAME;

  DROP TABLE POST_GRAND_NAME_SRC;
  CREATE TABLE POST_GRAND_NAME_SRC(
  ENG VARCHAR(15),
  ARB VARCHAR(15));

  PREPARE LOAD_POST_GRAND_NAME AS
  INSERT INTO POST_GRAND_NAME_SRC(ARB,ENG)
  SELECT
    UPPER(SPM_POST_GRAND_ANAME),
    UPPER(SPM_POST_GRAND_ENAME)
  FROM PERSON_MASTER_SRC;
  EXECUTE LOAD_POST_GRAND_NAME;

  DROP TABLE FIFTH_NAME_SRC;
  CREATE TABLE FIFTH_NAME_SRC(
  ENG VARCHAR(15),
  ARB VARCHAR(15));

  PREPARE LOAD_FIFTH_NAME AS
  INSERT INTO FIFTH_NAME_SRC(ARB,ENG)
  SELECT
    UPPER(SPM_FIFTH_ANAME),
    UPPER(SPM_FIFTH_ENAME)
  FROM PERSON_MASTER_SRC;
  EXECUTE LOAD_FIFTH_NAME;

  DROP TABLE FAMILY_NAME_SRC;
  CREATE TABLE FAMILY_NAME_SRC(
  ENG VARCHAR(15),
  ARB VARCHAR(15));

  PREPARE LOAD_FAMILY_NAME AS
  INSERT INTO FAMILY_NAME_SRC(ARB,ENG)
  SELECT
    UPPER(SPM_FAMILY_ANAME),
    UPPER(SPM_FAMILY_ENAME)
  FROM PERSON_MASTER_SRC;
  EXECUTE LOAD_FAMILY_NAME;

  DROP TABLE CLAN_NAME_SRC;
  CREATE TABLE CLAN_NAME_SRC(
  ENG VARCHAR(20),
  ARB VARCHAR(20));

  PREPARE LOAD_CLAN_NAME AS
  INSERT INTO CLAN_NAME_SRC(ARB,ENG)
  SELECT
    UPPER(SPM_CLAN_ANAME),
    UPPER(SPM_CLAN_ENAME)
  FROM PERSON_MASTER_SRC;
  EXECUTE LOAD_CLAN_NAME;

  DROP TABLE MOTHER_NAME_SRC;
  CREATE TABLE MOTHER_NAME_SRC(
  ENG VARCHAR(15),
  ARB VARCHAR(15));

  PREPARE LOAD_MOTHER_NAME AS
  INSERT INTO MOTHER_NAME_SRC(ARB,ENG)
  SELECT
    UPPER(SPM_MOTHER_ANAME),
    UPPER(SPM_MOTHER_ENAME)
  FROM PERSON_MASTER_SRC;
  EXECUTE LOAD_MOTHER_NAME;

  DROP TABLE MOTHER_FATHER_NAME_SRC;
  CREATE TABLE MOTHER_FATHER_NAME_SRC(
  ENG VARCHAR(15),
  ARB VARCHAR(15));

  PREPARE LOAD_MOTHER_FATHER_NAME AS
  INSERT INTO MOTHER_FATHER_NAME_SRC(ARB,ENG)
  SELECT
    UPPER(SPM_MOTHER_FATHER_ANAME),
    UPPER(SPM_MOTHER_FATHER_ENAME)
  FROM PERSON_MASTER_SRC;
  EXECUTE LOAD_MOTHER_FATHER_NAME;







  DROP TABLE NAME_MASTER;
  CREATE TABLE NAME_MASTER(
  ID SERIAL NOT NULL,
  ENG VARCHAR(15),
  ARB VARCHAR(15),
  COUNT INTEGER,
  CONSTRAINT NAME_MASTER_PKEY PRIMARY KEY (ID));

  DROP TABLE FATHER_NAME_MASTER;
  CREATE TABLE FATHER_NAME_MASTER(
  ID SERIAL NOT NULL,
  ENG VARCHAR(15),
  ARB VARCHAR(15),
  COUNT INTEGER,
  CONSTRAINT FATHER_NAME_MASTER_PKEY PRIMARY KEY (ID));

  DROP TABLE GRAND_NAME_MASTER;
  CREATE TABLE GRAND_NAME_MASTER(
  ID SERIAL NOT NULL,
  ENG VARCHAR(15),
  ARB VARCHAR(15),
  COUNT INTEGER,
  CONSTRAINT GRAND_NAME_MASTER_PKEY PRIMARY KEY (ID));

  DROP TABLE POST_GRAND_NAME_MASTER;
  CREATE TABLE POST_GRAND_NAME_MASTER(
  ID SERIAL NOT NULL,
  ENG VARCHAR(15),
  ARB VARCHAR(15),
  COUNT INTEGER,
  CONSTRAINT POST_GRAND_NAME_MASTER_PKEY PRIMARY KEY (ID));

  DROP TABLE FIFTH_NAME_MASTER;
  CREATE TABLE FIFTH_NAME_MASTER(
  ID SERIAL NOT NULL,
  ENG VARCHAR(15),
  ARB VARCHAR(15),
  COUNT INTEGER,
  CONSTRAINT FIFTH_NAME_MASTER_MASTER_PKEY PRIMARY KEY (ID));

  DROP TABLE FAMILY_NAME_MASTER;
  CREATE TABLE FAMILY_NAME_MASTER(
  ID SERIAL NOT NULL,
  ENG VARCHAR(15),
  ARB VARCHAR(15),
  COUNT INTEGER,
  CONSTRAINT FAMILY_NAME_MASTER_PKEY PRIMARY KEY (ID));

  DROP TABLE CLAN_NAME_MASTER;
  CREATE TABLE CLAN_NAME_MASTER(
  ID SERIAL NOT NULL,
  ENG VARCHAR(20),
  ARB VARCHAR(20),
  COUNT INTEGER,
  CONSTRAINT CLAN_NAME_MASTER_PKEY PRIMARY KEY (ID));

  DROP TABLE MOTHER_NAME_MASTER;
  CREATE TABLE MOTHER_NAME_MASTER(
  ID SERIAL NOT NULL,
  ENG VARCHAR(15),
  ARB VARCHAR(15),
  COUNT INTEGER,
  CONSTRAINT MOTHER_NAME_MASTER_PKEY PRIMARY KEY (ID));

  DROP TABLE MOTHER_FATHER_NAME_MASTER;
  CREATE TABLE MOTHER_FATHER_NAME_MASTER(
  ID SERIAL NOT NULL,
  ENG VARCHAR(15),
  ARB VARCHAR(15),
  COUNT INTEGER,
  CONSTRAINT MOTHER_FATHER_NAME_MASTER_PKEY PRIMARY KEY (ID));


  PREPARE GROUP_NAME AS
  INSERT INTO NAME_MASTER(ARB,ENG,COUNT)
  SELECT ARB, ENG, COUNT(1)
  FROM NAME_SRC
  GROUP BY ARB, ENG;

  PREPARE GROUP_FATHER_NAME AS
  INSERT INTO FATHER_NAME_MASTER(ARB,ENG,COUNT)
  SELECT ARB, ENG, COUNT(1)
  FROM FATHER_NAME_SRC
  GROUP BY ARB, ENG;

  PREPARE GROUP_GRAND_NAME AS
  INSERT INTO GRAND_NAME_MASTER(ARB,ENG,COUNT)
  SELECT ARB, ENG, COUNT(1)
  FROM GRAND_NAME_SRC
  GROUP BY ARB, ENG;

  PREPARE GROUP_POST_GRAND_NAME AS
  INSERT INTO POST_GRAND_NAME_MASTER(ARB,ENG,COUNT)
  SELECT ARB, ENG, COUNT(1)
  FROM POST_GRAND_NAME_SRC
  GROUP BY ARB, ENG;

  PREPARE GROUP_FIFTH_NAME AS
  INSERT INTO FIFTH_NAME_MASTER(ARB,ENG,COUNT)
  SELECT ARB, ENG, COUNT(1)
  FROM FIFTH_NAME_SRC
  GROUP BY ARB, ENG;

  PREPARE GROUP_FAMILY_NAME AS
  INSERT INTO FAMILY_NAME_MASTER(ARB,ENG,COUNT)
  SELECT ARB, ENG, COUNT(1)
  FROM FAMILY_NAME_SRC
  GROUP BY ARB, ENG;

  PREPARE GROUP_CLAN_NAME AS
  INSERT INTO CLAN_NAME_MASTER(ARB,ENG,COUNT)
  SELECT ARB, ENG, COUNT(1)
  FROM CLAN_NAME_SRC
  GROUP BY ARB, ENG;

  PREPARE GROUP_MOTHER_NAME AS
  INSERT INTO MOTHER_NAME_MASTER(ARB,ENG,COUNT)
  SELECT ARB, ENG, COUNT(1)
  FROM MOTHER_NAME_SRC
  GROUP BY ARB, ENG;

  PREPARE GROUP_MOTHER_FATHER_NAME AS
  INSERT INTO MOTHER_FATHER_NAME_MASTER(ARB,ENG,COUNT)
  SELECT ARB, ENG, COUNT(1)
  FROM MOTHER_FATHER_NAME_SRC
  GROUP BY ARB, ENG;

  EXECUTE GROUP_NAME;
  COMMIT;
  EXECUTE GROUP_FATHER_NAME;
  COMMIT;
  EXECUTE GROUP_GRAND_NAME;
  COMMIT;
  EXECUTE GROUP_POST_GRAND_NAME;
  COMMIT;
  EXECUTE GROUP_FIFTH_NAME;
  COMMIT;
  EXECUTE GROUP_FAMILY_NAME;
  COMMIT;
  EXECUTE GROUP_CLAN_NAME;
  COMMIT;
  EXECUTE GROUP_MOTHER_NAME;
  COMMIT;
  EXECUTE GROUP_MOTHER_FATHER_NAME;
  COMMIT;


  CREATE INDEX NAME_MASTER_ENG_IDX ON NAME_MASTER (ENG);
  CREATE INDEX NAME_MASTER_ARB_IDX ON NAME_MASTER (ARB);
  ANALYZE NAME_MASTER;
  CREATE INDEX FATHER_NAME_MASTER_ENG_IDX ON FATHER_NAME_MASTER (ENG);
  CREATE INDEX FATHER_NAME_MASTER_ARB_IDX ON FATHER_NAME_MASTER (ARB);
  ANALYZE FATHER_NAME_MASTER;
  CREATE INDEX GRAND_NAME_MASTER_ENG_IDX ON GRAND_NAME_MASTER (ENG);
  CREATE INDEX GRAND_NAME_MASTER_ARB_IDX ON GRAND_NAME_MASTER (ARB);
  ANALYZE GRAND_NAME_MASTER;
  CREATE INDEX POST_GRAND_NAME_MASTER_ENG_IDX ON POST_GRAND_NAME_MASTER (ENG);
  CREATE INDEX POST_GRAND_NAME_MASTER_ARB_IDX ON POST_GRAND_NAME_MASTER (ARB);
  ANALYZE POST_GRAND_NAME_MASTER;
  CREATE INDEX FIFTH_NAME_MASTER_ENG_IDX ON FIFTH_NAME_MASTER (ENG);
  CREATE INDEX FIFTH_NAME_MASTER_ARB_IDX ON FIFTH_NAME_MASTER (ARB);
  ANALYZE FIFTH_NAME_MASTER;
  CREATE INDEX FAMILY_NAME_MASTER_ENG_IDX ON FAMILY_NAME_MASTER (ENG);
  CREATE INDEX FAMILY_NAME_MASTER_ARB_IDX ON FAMILY_NAME_MASTER (ARB);
  ANALYZE FAMILY_NAME_MASTER;
  CREATE INDEX CLAN_NAME_MASTER_ENG_IDX ON CLAN_NAME_MASTER (ENG);
  CREATE INDEX CLAN_NAME_MASTER_ARB_IDX ON CLAN_NAME_MASTER (ARB);
  ANALYZE CLAN_NAME_MASTER;
  CREATE INDEX MOTHER_NAME_MASTER_ENG_IDX ON MOTHER_NAME_MASTER (ENG);
  CREATE INDEX MOTHER_NAME_MASTER_ARB_IDX ON MOTHER_NAME_MASTER (ARB);
  ANALYZE MOTHER_NAME_MASTER;
  CREATE INDEX MOTHER_FATHER_NAME_MASTER_ENG_IDX ON MOTHER_FATHER_NAME_MASTER (ENG);
  CREATE INDEX MOTHER_FATHER_NAME_MASTER_ARB_IDX ON MOTHER_FATHER_NAME_MASTER (ARB);
  ANALYZE MOTHER_FATHER_NAME_MASTER;



  DROP TABLE GIVEN_NAMES_MASTER;
  CREATE TABLE GIVEN_NAMES_MASTER(
  ID SERIAL NOT NULL,
  ENG VARCHAR(15),
  ARB VARCHAR(15),
  COUNT INTEGER,
  CONSTRAINT GIVEN_NAME_MASTER_PKEY PRIMARY KEY (ID));

  DROP TABLE FAMILY_NAMES_MASTER;
  CREATE TABLE FAMILY_NAMES_MASTER(
  ID SERIAL NOT NULL,
  ENG VARCHAR(20),
  ARB VARCHAR(20),
  COUNT INTEGER,
  CONSTRAINT FAMILY_NAMES_MASTER_PKEY PRIMARY KEY (ID));

  DEALLOCATE GROUP_GIVEN_NAMES;
  PREPARE GROUP_GIVEN_NAMES AS
  INSERT INTO GIVEN_NAMES_MASTER(ARB,ENG,COUNT)
  SELECT ARB, ENG, SUM(COUNT) FROM (
    SELECT ARB, ENG, COUNT FROM NAME_MASTER
    UNION ALL SELECT ARB, ENG, COUNT FROM FATHER_NAME_MASTER
    UNION ALL SELECT ARB, ENG, COUNT FROM GRAND_NAME_MASTER
    UNION ALL SELECT ARB, ENG, COUNT FROM POST_GRAND_NAME_MASTER
    UNION ALL SELECT ARB, ENG, COUNT FROM FIFTH_NAME_MASTER
    UNION ALL SELECT ARB, ENG, COUNT FROM MOTHER_NAME_MASTER
    UNION ALL SELECT ARB, ENG, COUNT FROM MOTHER_FATHER_NAME_MASTER
  ) AS SUB GROUP BY SUB.ARB, SUB.ENG;
  EXECUTE GROUP_GIVEN_NAMES;

  PREPARE GROUP_FAMILY_NAMES AS
  INSERT INTO FAMILY_NAMES_MASTER(ARB,ENG,COUNT)
  SELECT ARB, ENG, SUM(COUNT) FROM (
    SELECT ARB, ENG, COUNT FROM FAMILY_NAME_MASTER
    UNION ALL SELECT ARB, ENG, COUNT FROM CLAN_NAME_MASTER
  ) AS SUB GROUP BY SUB.ARB, SUB.ENG;
  EXECUTE GROUP_FAMILY_NAMES;

  CREATE INDEX GIVEN_NAMES_MASTER_ENG_IDX ON GIVEN_NAMES_MASTER (ENG);
  CREATE INDEX GIVEN_NAMES_MASTER_ARB_IDX ON GIVEN_NAMES_MASTER (ARB);
  ANALYZE GIVEN_NAMES_MASTER;

  CREATE INDEX FAMILY_NAMES_MASTER_ENG_IDX ON FAMILY_NAMES_MASTER (ENG);
  CREATE INDEX FAMILY_NAMES_MASTER_ARB_IDX ON FAMILY_NAMES_MASTER (ARB);
  ANALYZE FAMILY_NAMES_MASTER;


  DROP TABLE STAGING_GIVEN_NAMES;
  CREATE TABLE STAGING_GIVEN_NAMES(
  ID SERIAL NOT NULL,
  ENG VARCHAR(15),
  ARB VARCHAR(15),
  COUNT INTEGER,
  CONSTRAINT STAGING_GIVEN_NAME_PKEY PRIMARY KEY (ID));

  DROP TABLE STAGING_FAMILY_NAMES;
  CREATE TABLE STAGING_FAMILY_NAMES(
  ID SERIAL NOT NULL,
  ENG VARCHAR(20),
  ARB VARCHAR(20),
  COUNT INTEGER,
  CONSTRAINT STAGING_FAMILY_NAMES_PKEY PRIMARY KEY (ID));


  INSERT INTO STAGING_GIVEN_NAMES(ENG, ARB, COUNT)
  SELECT TRIM(BOTH ENG), TRIM(BOTH ARB), COUNT
  FROM GIVEN_NAMES_MASTER;

  INSERT INTO STAGING_FAMILY_NAMES(ENG, ARB, COUNT)
  SELECT TRIM(BOTH ENG), TRIM(BOTH ARB), COUNT
  FROM FAMILY_NAMES_MASTER;



  CREATE INDEX GIVEN_NAMES_MASTER_ENG_IDX ON GIVEN_NAMES_MASTER (ENG);
  CREATE INDEX GIVEN_NAMES_MASTER_ARB_IDX ON GIVEN_NAMES_MASTER (ARB);
  ANALYZE GIVEN_NAMES_MASTER;

  CREATE INDEX FAMILY_NAMES_MASTER_ENG_IDX ON FAMILY_NAMES_MASTER (ENG);
  CREATE INDEX FAMILY_NAMES_MASTER_ARB_IDX ON FAMILY_NAMES_MASTER (ARB);
  ANALYZE FAMILY_NAMES_MASTER;





DROP TABLE GIVEN_NAMES_DAN_STAGING;
CREATE TABLE GIVEN_NAMES_DAN_STAGING(
ARB VARCHAR(25),
ENG VARCHAR(25),
FREQ NUMERIC(10));

\COPY GIVEN_NAMES_DAN_STAGING FROM '/home/phonetic/source_data/DAN/arabic_given_names.csv' DELIMITER '|';
\COPY GIVEN_NAMES_DAN_STAGING FROM '/home/phonetic/source_data/DAN/english_given_names.csv' DELIMITER '|';
\COPY GIVEN_NAMES_DAN_STAGING FROM '/home/phonetic/source_data/DAN/abd-al-raheem.csv' DELIMITER '|';

DROP TABLE GIVEN_NAMES_DAN_U8_STAGING;
CREATE TABLE GIVEN_NAMES_DAN_U8_STAGING(
ID NUMERIC(8),
SUBID NUMERIC(8),
R_NAME VARCHAR(25),
A_NAME VARCHAR(25),
BUCKWALTER VARCHAR(25),
GENDER VARCHAR(2),
TYPE VARCHAR(2),
R_TYPE VARCHAR(2),
FREQ NUmERIC(10));

\COPY GIVEN_NAMES_DAN_U8_STAGING FROM '/home/phonetic/source_data/DAN/dan_30_samp.u8.no_header' DELIMITER E'\t' CSV;


INSERT INTO GIVEN_NAMES_DAN_STAGING(ARB,ENG,FREQ)
SELECT A_NAME, R_NAME, FREQ
FROM GIVEN_NAMES_DAN_U8_STAGING;


DROP TABLE GIVEN_NAMES_DAN;
CREATE TABLE GIVEN_NAMES_DAN(
ID SERIAL NOT NULL,
ENG VARCHAR(25),
ARB VARCHAR(25),
FREQ NUMERIC(10),
CONSTRAINT GIVEN_NAMES_DAN_PKEY PRIMARY KEY (ID));

INSERT INTO GIVEN_NAMES_DAN(ARB,ENG,FREQ)
SELECT UPPER(ARB), UPPER(ENG), SUM(FREQ) FROM (
    SELECT DISTINCT ARB, ENG, FREQ
    FROM GIVEN_NAMES_DAN_STAGING
) AS SUB GROUP BY SUB.ARB, SUB.ENG;

CREATE INDEX GIVEN_NAMES_DAN_ENG_IDX ON GIVEN_NAMES_DAN (ENG);
CREATE INDEX GIVEN_NAMES_DAN_ARB_IDX ON GIVEN_NAMES_DAN (ARB);
ANALYZE GIVEN_NAMES_DAN;

DROP TABLE GIVEN_NAMES_DAN_STAGING;








  DROP TABLE NAME_VARIANTS;
  CREATE TABLE NAME_VARIANTS(
  VAR_ID NOT NULL,
  SUB_ID NOT NULL,
  NAME VARCHAR(20),
  ARB VARCHAR(15),
  FREQUENCY INTEGER,
  CONSTRAINT NAME_VARIANTS_PKEY PRIMARY KEY (ID));





  DROP TABLE ARABIC_GIVEN_NAMES_G_TRANSLATED;
  CREATE TABLE ARABIC_GIVEN_NAMES_G_TRANSLATED(
  ID SERIAL NOT NULL,
  ARB VARCHAR(15),
  COUNT INTEGER,
  ENG_TRANSLATED VARCHAR(15),
  CONSTRAINT ARABIC_GIVEN_NAMES_G_TRANSLATED_PKEY PRIMARY KEY (ID));

  INSERT INTO ARABIC_GIVEN_NAMES_G_TRANSLATED(ARB, COUNT)
  SELECT ARB, COUNT(1)
  FROM GIVEN_NAMES_MASTER M
  WHERE ARB IS NOT NULL AND ARB != ''
  GROUP BY M.ARB;



\COPY (SELECT id, freq, eng, arb FROM GIVEN_NAMES_DAN) TO '/home/phonetic/table_exports/GIVEN_NAMES_DAN.csv' DELIMITER '|' CSV HEADER;
\COPY (SELECT id, count, eng, arb FROM GIVEN_NAMES_MASTER) TO '/home/phonetic/table_exports/GIVEN_NAMES_MASTER.csv' DELIMITER '|' CSV HEADER;
\COPY (SELECT id, count, eng, arb FROM FAMILY_NAMES_MASTER) TO '/home/phonetic/table_exports/FAMILY_NAMES_MASTER.csv' DELIMITER '|' CSV HEADER;



update ARABIC_GIVEN_NAMES_G_TRANSLATED AS t
SET ENG_TRANSLATED = t.col1 FROM temp_table AS t WHERE f.id = t.id;









drop table testing_data.m_person_master_src;
create table testing_data.m_person_master_src (
SPM_FULL_ANAME VARCHAR(80),
SPM_ANAME VARCHAR(15),
SPM_FATHER_ANAME varchar(15),
SPM_GRAND_ANAME varchar(15),
SPM_POST_GRAND_ANAME varchar(15),
SPM_FIFTH_ANAME varchar(15),
SPM_FAMILY_ANAME varchar(15),
SPM_CLAN_ANAME varchar(20),
SPM_MOTHER_ANAME varchar(15),
SPM_MOTHER_FATHER_ANAME varchar(15),
SPM_FULL_ENAME varchar(80),
SPM_ENAME varchar(15),
SPM_FATHER_ENAME varchar(15),
SPM_GRAND_ENAME varchar(15),
SPM_POST_GRAND_ENAME varchar(15),
SPM_FIFTH_ENAME varchar(15),
SPM_FAMILY_ENAME varchar(15),
SPM_CLAN_ENAME varchar(20),
SPM_MOTHER_ENAME varchar(15),
SPM_MOTHER_FATHER_ENAME varchar(15));


\COPY testing_data.m_person_master_src FROM '/home/phonetic/source_data/m_person_master.dsv' DELIMITER '|' CSV HEADER;

CREATE TABLE testing_data.M_PERSON_MASTER(
ID SERIAL NOT NULL,
SPM_FULL_ANAME VARCHAR(80),
SPM_ANAME VARCHAR(15),
SPM_FATHER_ANAME varchar(15),
SPM_GRAND_ANAME varchar(15),
SPM_POST_GRAND_ANAME varchar(15),
SPM_FIFTH_ANAME varchar(15),
SPM_FAMILY_ANAME varchar(15),
SPM_CLAN_ANAME varchar(20),
SPM_MOTHER_ANAME varchar(15),
SPM_MOTHER_FATHER_ANAME varchar(15),
SPM_FULL_ENAME varchar(80),
SPM_ENAME varchar(15),
SPM_FATHER_ENAME varchar(15),
SPM_GRAND_ENAME varchar(15),
SPM_POST_GRAND_ENAME varchar(15),
SPM_FIFTH_ENAME varchar(15),
SPM_FAMILY_ENAME varchar(15),
SPM_CLAN_ENAME varchar(20),
SPM_MOTHER_ENAME varchar(15),
SPM_MOTHER_FATHER_ENAME varchar(15),
CONSTRAINT PERSON_MASTER_PKEY PRIMARY KEY (ID));


prepare load_uppercase AS
insert into testing_data.M_PERSON_MASTER(
  SPM_FULL_ANAME,
  SPM_ANAME,
  SPM_FATHER_ANAME,
  SPM_GRAND_ANAME,
  SPM_POST_GRAND_ANAME,
  SPM_FIFTH_ANAME,
  SPM_FAMILY_ANAME,
  SPM_CLAN_ANAME,
  SPM_MOTHER_ANAME,
  SPM_MOTHER_FATHER_ANAME,
  SPM_FULL_ENAME,
  SPM_ENAME,
  SPM_FATHER_ENAME,
  SPM_GRAND_ENAME,
  SPM_POST_GRAND_ENAME,
  SPM_FIFTH_ENAME,
  SPM_FAMILY_ENAME,
  SPM_CLAN_ENAME,
  SPM_MOTHER_ENAME,
  SPM_MOTHER_FATHER_ENAME
  )
select
  upper(trim(SPM_FULL_ANAME)),
  upper(trim(SPM_ANAME)),
  upper(trim(SPM_FATHER_ANAME)),
  upper(trim(SPM_GRAND_ANAME)),
  upper(trim(SPM_POST_GRAND_ANAME)),
  upper(trim(SPM_FIFTH_ANAME)),
  upper(trim(SPM_FAMILY_ANAME)),
  upper(trim(SPM_CLAN_ANAME)),
  upper(trim(SPM_MOTHER_ANAME)),
  upper(trim(SPM_MOTHER_FATHER_ANAME)),
  upper(trim(SPM_FULL_ENAME)),
  upper(trim(SPM_ENAME)),
  upper(trim(SPM_FATHER_ENAME)),
  upper(trim(SPM_GRAND_ENAME)),
  upper(trim(SPM_POST_GRAND_ENAME)),
  upper(trim(SPM_FIFTH_ENAME)),
  upper(trim(SPM_FAMILY_ENAME)),
  upper(trim(SPM_CLAN_ENAME)),
  upper(trim(SPM_MOTHER_ENAME)),
  upper(trim(SPM_MOTHER_FATHER_ENAME))
from testing_data.m_person_master_src;
execute load_uppercase;


DROP TABLE testing_data.GIVEN_NAMES_MASTER;
CREATE TABLE testing_data.GIVEN_NAMES_MASTER(
ID SERIAL NOT NULL,
ENG VARCHAR(15),
ARB VARCHAR(15),
COUNT INTEGER,
CONSTRAINT testing_data_GIVEN_NAME_MASTER_PKEY PRIMARY KEY (ID));

DROP TABLE testing_data.FAMILY_NAMES_MASTER;
CREATE TABLE testing_data.FAMILY_NAMES_MASTER(
ID SERIAL NOT NULL,
ENG VARCHAR(20),
ARB VARCHAR(20),
COUNT INTEGER,
CONSTRAINT testing_data_FAMILY_NAMES_MASTER_PKEY PRIMARY KEY (ID));



DROP TABLE testing_data.m_NAME_SRC;
CREATE TABLE testing_data.m_NAME_SRC(
ENG VARCHAR(15),
ARB VARCHAR(15));

PREPARE LOAD_NAME AS
INSERT INTO testing_data.m_NAME_SRC(ARB,ENG)
SELECT
  UPPER(SPM_ANAME),
  UPPER(SPM_ENAME)
FROM testing_data.m_PERSON_MASTER_SRC;
EXECUTE LOAD_NAME;

DROP TABLE testing_data.m_FATHER_NAME_SRC;
CREATE TABLE testing_data.m_FATHER_NAME_SRC(
ENG VARCHAR(15),
ARB VARCHAR(15));

PREPARE LOAD_FATHER_NAME AS
INSERT INTO testing_data.m_FATHER_NAME_SRC(ARB,ENG)
SELECT
  UPPER(SPM_FATHER_ANAME),
  UPPER(SPM_FATHER_ENAME)
FROM testing_data.m_PERSON_MASTER_SRC;
EXECUTE LOAD_FATHER_NAME;

DROP TABLE testing_data.m_GRAND_NAME_SRC;
CREATE TABLE testing_data.m_GRAND_NAME_SRC(
ID SERIAL NOT NULL,
ENG VARCHAR(15),
ARB VARCHAR(15));

PREPARE LOAD_GRAND_NAME AS
INSERT INTO testing_data.m_GRAND_NAME_SRC(ARB,ENG)
SELECT
  UPPER(SPM_GRAND_ANAME),
  UPPER(SPM_GRAND_ENAME)
FROM PERSON_MASTER_SRC;
EXECUTE testing_data.m_LOAD_GRAND_NAME;

DROP TABLE testing_data.m_POST_GRAND_NAME_SRC;
CREATE TABLE testing_data.m_POST_GRAND_NAME_SRC(
ENG VARCHAR(15),
ARB VARCHAR(15));

PREPARE LOAD_POST_GRAND_NAME AS
INSERT INTO testing_data.m_POST_GRAND_NAME_SRC(ARB,ENG)
SELECT
  UPPER(SPM_POST_GRAND_ANAME),
  UPPER(SPM_POST_GRAND_ENAME)
FROM testing_data.m_PERSON_MASTER_SRC;
EXECUTE LOAD_POST_GRAND_NAME;

DROP TABLE testing_data.m_FIFTH_NAME_SRC;
CREATE TABLE testing_data.m_FIFTH_NAME_SRC(
ENG VARCHAR(15),
ARB VARCHAR(15));

PREPARE LOAD_FIFTH_NAME AS
INSERT INTO testing_data.m_FIFTH_NAME_SRC(ARB,ENG)
SELECT
  UPPER(SPM_FIFTH_ANAME),
  UPPER(SPM_FIFTH_ENAME)
FROM testing_data.m_PERSON_MASTER_SRC;
EXECUTE LOAD_FIFTH_NAME;

DROP TABLE testing_data.m_FAMILY_NAME_SRC;
CREATE TABLE testing_data.m_FAMILY_NAME_SRC(
ENG VARCHAR(15),
ARB VARCHAR(15));

PREPARE LOAD_FAMILY_NAME AS
INSERT INTO testing_data.m_FAMILY_NAME_SRC(ARB,ENG)
SELECT
  UPPER(SPM_FAMILY_ANAME),
  UPPER(SPM_FAMILY_ENAME)
FROM testing_data.m_PERSON_MASTER_SRC;
EXECUTE LOAD_FAMILY_NAME;

DROP TABLE testing_data.m_CLAN_NAME_SRC;
CREATE TABLE testing_data.m_CLAN_NAME_SRC(
ENG VARCHAR(20),
ARB VARCHAR(20));

PREPARE LOAD_CLAN_NAME AS
INSERT INTO testing_data.m_CLAN_NAME_SRC(ARB,ENG)
SELECT
  UPPER(SPM_CLAN_ANAME),
  UPPER(SPM_CLAN_ENAME)
FROM testing_data.m_PERSON_MASTER_SRC;
EXECUTE LOAD_CLAN_NAME;

DROP TABLE testing_data.m_MOTHER_NAME_SRC;
CREATE TABLE testing_data.m_MOTHER_NAME_SRC(
ENG VARCHAR(15),
ARB VARCHAR(15));

PREPARE LOAD_MOTHER_NAME AS
INSERT INTO testing_data.m_MOTHER_NAME_SRC(ARB,ENG)
SELECT
  UPPER(SPM_MOTHER_ANAME),
  UPPER(SPM_MOTHER_ENAME)
FROM testing_data.m_PERSON_MASTER_SRC;
EXECUTE LOAD_MOTHER_NAME;

DROP TABLE testing_data.m_MOTHER_FATHER_NAME_SRC;
CREATE TABLE testing_data.m_MOTHER_FATHER_NAME_SRC(
ENG VARCHAR(15),
ARB VARCHAR(15));

PREPARE LOAD_MOTHER_FATHER_NAME AS
INSERT INTO testing_data.m_MOTHER_FATHER_NAME_SRC(ARB,ENG)
SELECT
  UPPER(SPM_MOTHER_FATHER_ANAME),
  UPPER(SPM_MOTHER_FATHER_ENAME)
FROM testing_data.m_PERSON_MASTER_SRC;
EXECUTE LOAD_MOTHER_FATHER_NAME;





DROP TABLE testing_data.m_NAME_MASTER;
CREATE TABLE testing_data.m_NAME_MASTER(
ID SERIAL NOT NULL,
ENG VARCHAR(15),
ARB VARCHAR(15),
COUNT INTEGER);

DROP TABLE testing_data.m_FATHER_NAME_MASTER;
CREATE TABLE testing_data.m_FATHER_NAME_MASTER(
ID SERIAL NOT NULL,
ENG VARCHAR(15),
ARB VARCHAR(15),
COUNT INTEGER);

DROP TABLE testing_data.m_GRAND_NAME_MASTER;
CREATE TABLE testing_data.m_GRAND_NAME_MASTER(
ID SERIAL NOT NULL,
ENG VARCHAR(15),
ARB VARCHAR(15),
COUNT INTEGER);

DROP TABLE testing_data.m_POST_GRAND_NAME_MASTER;
CREATE TABLE testing_data.m_POST_GRAND_NAME_MASTER(
ID SERIAL NOT NULL,
ENG VARCHAR(15),
ARB VARCHAR(15),
COUNT INTEGER);

DROP TABLE testing_data.m_FIFTH_NAME_MASTER;
CREATE TABLE testing_data.m_FIFTH_NAME_MASTER(
ID SERIAL NOT NULL,
ENG VARCHAR(15),
ARB VARCHAR(15),
COUNT INTEGER);

DROP TABLE testing_data.m_FAMILY_NAME_MASTER;
CREATE TABLE testing_data.m_FAMILY_NAME_MASTER(
ID SERIAL NOT NULL,
ENG VARCHAR(15),
ARB VARCHAR(15),
COUNT INTEGER);

DROP TABLE testing_data.m_CLAN_NAME_MASTER;
CREATE TABLE testing_data.m_CLAN_NAME_MASTER(
ID SERIAL NOT NULL,
ENG VARCHAR(20),
ARB VARCHAR(20),
COUNT INTEGER);

DROP TABLE testing_data.m_MOTHER_NAME_MASTER;
CREATE TABLE testing_data.m_MOTHER_NAME_MASTER(
ID SERIAL NOT NULL,
ENG VARCHAR(15),
ARB VARCHAR(15),
COUNT INTEGER);

DROP TABLE testing_data.m_MOTHER_FATHER_NAME_MASTER;
CREATE TABLE testing_data.m_MOTHER_FATHER_NAME_MASTER(
ID SERIAL NOT NULL,
ENG VARCHAR(15),
ARB VARCHAR(15),
COUNT INTEGER);


PREPARE GROUP_NAME AS
INSERT INTO testing_data.m_NAME_MASTER(ARB,ENG,COUNT)
SELECT ARB, ENG, COUNT(1)
FROM testing_data.m_NAME_SRC
GROUP BY ARB, ENG;

PREPARE GROUP_FATHER_NAME AS
INSERT INTO testing_data.m_FATHER_NAME_MASTER(ARB,ENG,COUNT)
SELECT ARB, ENG, COUNT(1)
FROM testing_data.m_FATHER_NAME_SRC
GROUP BY ARB, ENG;

PREPARE GROUP_GRAND_NAME AS
INSERT INTO testing_data.m_GRAND_NAME_MASTER(ARB,ENG,COUNT)
SELECT ARB, ENG, COUNT(1)
FROM testing_data.m_GRAND_NAME_SRC
GROUP BY ARB, ENG;

PREPARE GROUP_POST_GRAND_NAME AS
INSERT INTO testing_data.m_POST_GRAND_NAME_MASTER(ARB,ENG,COUNT)
SELECT ARB, ENG, COUNT(1)
FROM testing_data.m_POST_GRAND_NAME_SRC
GROUP BY ARB, ENG;

PREPARE GROUP_FIFTH_NAME AS
INSERT INTO testing_data.m_FIFTH_NAME_MASTER(ARB,ENG,COUNT)
SELECT ARB, ENG, COUNT(1)
FROM testing_data.m_FIFTH_NAME_SRC
GROUP BY ARB, ENG;

PREPARE GROUP_FAMILY_NAME AS
INSERT INTO testing_data.m_FAMILY_NAME_MASTER(ARB,ENG,COUNT)
SELECT ARB, ENG, COUNT(1)
FROM testing_data.m_FAMILY_NAME_SRC
GROUP BY ARB, ENG;

PREPARE GROUP_CLAN_NAME AS
INSERT INTO testing_data.m_CLAN_NAME_MASTER(ARB,ENG,COUNT)
SELECT ARB, ENG, COUNT(1)
FROM testing_data.m_CLAN_NAME_SRC
GROUP BY ARB, ENG;

PREPARE GROUP_MOTHER_NAME AS
INSERT INTO testing_data.m_MOTHER_NAME_MASTER(ARB,ENG,COUNT)
SELECT ARB, ENG, COUNT(1)
FROM testing_data.m_MOTHER_NAME_SRC
GROUP BY ARB, ENG;

PREPARE GROUP_MOTHER_FATHER_NAME AS
INSERT INTO testing_data.m_MOTHER_FATHER_NAME_MASTER(ARB,ENG,COUNT)
SELECT ARB, ENG, COUNT(1)
FROM testing_data.m_MOTHER_FATHER_NAME_SRC
GROUP BY ARB, ENG;

EXECUTE GROUP_NAME;
EXECUTE GROUP_FATHER_NAME;
EXECUTE GROUP_GRAND_NAME;
EXECUTE GROUP_POST_GRAND_NAME;
EXECUTE GROUP_FIFTH_NAME;
EXECUTE GROUP_FAMILY_NAME;
EXECUTE GROUP_CLAN_NAME;
EXECUTE GROUP_MOTHER_NAME;
EXECUTE GROUP_MOTHER_FATHER_NAME;



DEALLOCATE GROUP_GIVEN_NAMES;
PREPARE GROUP_GIVEN_NAMES AS
INSERT INTO testing_data.GIVEN_NAMES_MASTER(ARB,ENG,COUNT)
SELECT ARB, ENG, SUM(COUNT) FROM (
  SELECT ARB, ENG, COUNT FROM testing_data.m_NAME_MASTER
  UNION ALL SELECT ARB, ENG, COUNT FROM testing_data.m_FATHER_NAME_MASTER
  UNION ALL SELECT ARB, ENG, COUNT FROM testing_data.m_GRAND_NAME_MASTER
  UNION ALL SELECT ARB, ENG, COUNT FROM testing_data.m_POST_GRAND_NAME_MASTER
  UNION ALL SELECT ARB, ENG, COUNT FROM testing_data.m_FIFTH_NAME_MASTER
  UNION ALL SELECT ARB, ENG, COUNT FROM testing_data.m_MOTHER_NAME_MASTER
  UNION ALL SELECT ARB, ENG, COUNT FROM testing_data.m_MOTHER_FATHER_NAME_MASTER
) AS SUB GROUP BY SUB.ARB, SUB.ENG;
EXECUTE GROUP_GIVEN_NAMES;

PREPARE GROUP_FAMILY_NAMES AS
INSERT INTO testing_data.FAMILY_NAMES_MASTER(ARB,ENG,COUNT)
SELECT ARB, ENG, SUM(COUNT) FROM (
  SELECT ARB, ENG, COUNT FROM testing_data.m_FAMILY_NAME_MASTER
  UNION ALL SELECT ARB, ENG, COUNT FROM testing_data.m_CLAN_NAME_MASTER
) AS SUB GROUP BY SUB.ARB, SUB.ENG;
EXECUTE GROUP_FAMILY_NAMES;


DROP TABLE testing_data.NAME_VECTORS;
CREATE TABLE testing_data.NAME_VECTORS(
ID SERIAL NOT NULL,
VECTOR VARCHAR(25),
NAME VARCHAR(15),
CONSTRAINT testing_data_NAME_VECTORS_PKEY PRIMARY KEY (ID));


INSERT INTO TESTING_DATA.NAME_VECTORS(NAME)
SELECT DISTINCT(ARB) FROM TESTING_DATA.GIVEN_NAMES_MASTER WHERE ARB IS NOT NULL AND ARB != ''
UNION ALL SELECT DISTINCT(ENG) FROM TESTING_DATA.GIVEN_NAMES_MASTER WHERE ENG IS NOT NULL AND ENG != ''
UNION ALL SELECT DISTINCT(ARB) FROM TESTING_DATA.FAMILY_NAMES_MASTER WHERE ARB IS NOT NULL AND ARB != ''
UNION ALL SELECT DISTINCT(ENG) FROM TESTING_DATA.FAMILY_NAMES_MASTER WHERE ENG IS NOT NULL AND ENG != ''


\COPY TESTING_DATA.NAME_VECTORS FROM '/home/jupyter/notebooks/PoC/data-preparation/output/name-vectors.csv' DELIMITER '|' CSV;



DROP TABLE testing_data.ENG_FULL_NAMES;
CREATE TABLE testing_data.ENG_FULL_NAMES(
ID SERIAL NOT NULL,
ENG VARCHAR(15),
ENG_VECTOR VARCHAR(2000));

DROP TABLE testing_data.ARB_FULL_NAMES;
CREATE TABLE testing_data.ARB_FULL_NAMES(
ID SERIAL NOT NULL,
ARB VARCHAR(15),
ARB_VECTOR VARCHAR(2000));


\COPY (SELECT id, eng FROM testing_data.ENG_FULL_NAMES) TO '/home/phonetic/table_exports/ENG_FULL_NAMES.csv' DELIMITER '|' CSV HEADER;
\COPY (SELECT id, arb FROM testing_data.ARB_FULL_NAMES) TO '/home/phonetic/table_exports/ARB_FULL_NAMES.csv' DELIMITER '|' CSV HEADER;


create schema validation;

drop table validation.validation_data_src;
CREATE TABLE validation.validation_data_src(
ENG VARCHAR(25),
ARB VARCHAR(25),
NUM VARCHAR(25),
ENG2 VARCHAR(25),
ARB2 VARCHAR(25),
ARB_VARIANTS VARCHAR(20000),
ARB_YAMLI_VARIANTS VARCHAR(20000),
ENG_VARIANTS VARCHAR(20000),
ARB_MODEL_VARIANTS VARCHAR(20000),
ENG_MODEL_VARIANTS VARCHAR(20000)
);

\COPY validation.validation_data_src FROM '/data-preparation/output/understanding_data/all_names_with_yamli.tsv' DELIMITER E'\t' CSV;


DROP TABLE validation.validation_data;
CREATE TABLE validation.validation_data(
ID SERIAL NOT NULL,
STATUS INTEGER DEFAULT 0,
LOGIN VARCHAR(20),
ENG VARCHAR(25),
ARB VARCHAR(25),
ENG_VARIANTS VARCHAR(20000),
ENG_MODEL_VARIANTS VARCHAR(20000),
ARB_VARIANTS VARCHAR(20000),
ARB_MODEL_VARIANTS VARCHAR(20000),
ARB_YAMLI_VARIANTS VARCHAR(20000),
ENG_INVALIDATED VARCHAR(20000),
ENG_MODEL_INVALIDATED VARCHAR(20000),
ARB_INVALIDATED VARCHAR(20000),
ARB_MODEL_INVALIDATED VARCHAR(20000),
ARB_YAMLI_INVALIDATED VARCHAR(20000),
CONSTRAINT VALIDATION_DATA_PKEY PRIMARY KEY (ID)
);

insert into validation.validation_data(eng, arb, eng_variants, eng_model_variants, arb_variants, arb_model_variants, arb_yamli_variants)
select eng, arb, eng_variants, eng_model_variants, arb_variants, arb_model_variants, arb_yamli_variants
from validation.validation_data_src;



\COPY (select distinct arb from given_names_master) TO '/home/phonetic/table_exports/given_names_master_arb_distinct.csv' DELIMITER '|' CSV HEADER;
\COPY (select distinct eng from given_names_master) TO '/home/phonetic/table_exports/given_names_master_eng_distinct.csv' DELIMITER '|' CSV HEADER;
\COPY (select distinct arb from given_names_dan) TO '/home/phonetic/table_exports/given_names_dan_arb_distinct.csv' DELIMITER '|' CSV HEADER;
\COPY (select distinct eng from given_names_dan) TO '/home/phonetic/table_exports/given_names_dan_eng_distinct.csv' DELIMITER '|' CSV HEADER;
\COPY (select distinct arb from given_names_dan) TO '/home/phonetic/table_exports/family_names_master_arb_distinct.csv' DELIMITER '|' CSV HEADER;
\COPY (select distinct eng from given_names_dan) TO '/home/phonetic/table_exports/family_names_master_eng_distinct.csv' DELIMITER '|' CSV HEADER;
